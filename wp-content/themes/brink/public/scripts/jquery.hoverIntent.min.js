/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!*****************************************************!*\
  !*** ./resources/scripts/jquery.hoverIntent.min.js ***!
  \*****************************************************/
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/*!
 * hoverIntent v1.8.0 // 2014.06.29 // jQuery v1.9.1+
 * http://cherne.net/brian/resources/jquery.hoverIntent.html
 *
 * You may use hoverIntent under the terms of the MIT license. Basically that
 * means you are free to use hoverIntent as long as this header is left intact.
 * Copyright 2007, 2014 Brian Cherne
 */
(function ($) {
  $.fn.hoverIntent = function (handlerIn, handlerOut, selector) {
    var cfg = {
      interval: 100,
      sensitivity: 6,
      timeout: 0
    };

    if (_typeof(handlerIn) === "object") {
      cfg = $.extend(cfg, handlerIn);
    } else {
      if ($.isFunction(handlerOut)) {
        cfg = $.extend(cfg, {
          over: handlerIn,
          out: handlerOut,
          selector: selector
        });
      } else {
        cfg = $.extend(cfg, {
          over: handlerIn,
          out: handlerIn,
          selector: handlerOut
        });
      }
    }

    var cX, cY, pX, pY;

    var track = function track(ev) {
      cX = ev.pageX;
      cY = ev.pageY;
    };

    var compare = function compare(ev, ob) {
      ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);

      if (Math.sqrt((pX - cX) * (pX - cX) + (pY - cY) * (pY - cY)) < cfg.sensitivity) {
        $(ob).off("mousemove.hoverIntent", track);
        ob.hoverIntent_s = true;
        return cfg.over.apply(ob, [ev]);
      } else {
        pX = cX;
        pY = cY;
        ob.hoverIntent_t = setTimeout(function () {
          compare(ev, ob);
        }, cfg.interval);
      }
    };

    var delay = function delay(ev, ob) {
      ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
      ob.hoverIntent_s = false;
      return cfg.out.apply(ob, [ev]);
    };

    var handleHover = function handleHover(e) {
      var ev = $.extend({}, e);
      var ob = this;

      if (ob.hoverIntent_t) {
        ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
      }

      if (e.type === "mouseenter") {
        pX = ev.pageX;
        pY = ev.pageY;
        $(ob).on("mousemove.hoverIntent", track);

        if (!ob.hoverIntent_s) {
          ob.hoverIntent_t = setTimeout(function () {
            compare(ev, ob);
          }, cfg.interval);
        }
      } else {
        $(ob).off("mousemove.hoverIntent", track);

        if (ob.hoverIntent_s) {
          ob.hoverIntent_t = setTimeout(function () {
            delay(ev, ob);
          }, cfg.timeout);
        }
      }
    };

    return this.on({
      "mouseenter.hoverIntent": handleHover,
      "mouseleave.hoverIntent": handleHover
    }, cfg.selector);
  };
})(jQuery);
/******/ })()
;
//# sourceMappingURL=jquery.hoverIntent.min.js.map